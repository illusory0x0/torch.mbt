package liuly0322/tch_mbt/torch

// Values
fn load_model_from_file(String) -> Model

fn tensor_from_array[T : Element](Array[T]) -> Tensor[T]

fn tensor_from_file[T : Element](String) -> Tensor[T]

// Types and methods
pub struct Model {
  id : Int64
}
impl Model {
  drop(Self) -> Unit
  forward[U, V](Self, Tensor[U]) -> Tensor[V]
}

pub struct Tensor[T] {
  id : Int64
}
impl Tensor {
  abs[T](Self[T]) -> Self[T]
  argmax[T](Self[T]) -> Self[Int64]
  argmin[T](Self[T]) -> Self[Int64]
  drop[T](Self[T]) -> Unit
  exp[T, U](Self[T]) -> Self[U]
  get_raw_data[T : Element](Self[T]) -> Array[T]
  length[T](Self[T]) -> Int
  log[T, U](Self[T]) -> Self[U]
  matmul[T](Self[T], Self[T]) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_mul[T](Self[T], Self[T]) -> Self[T]
  op_neg[T](Self[T]) -> Self[T]
  op_sub[T](Self[T], Self[T]) -> Self[T]
  reshape[T](Self[T], Array[Int]) -> Self[T]
  shape[T](Self[T]) -> Array[Int]
  transpose[T](Self[T]) -> Self[T]
}
impl[T] Eq for Tensor[T]
impl[T : Element + Show] Show for Tensor[T]

// Type aliases

// Traits
trait Element

