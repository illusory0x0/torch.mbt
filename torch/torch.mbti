package "liuly0322/tch_mbt/torch"

// Values
fn abs[T](Tensor[T]) -> Tensor[T]

fn argmax[T](Tensor[T]) -> Tensor[Int64]

fn argmin[T](Tensor[T]) -> Tensor[Int64]

fn exp[T, U](Tensor[T]) -> Tensor[U]

fn forward[U, V](Model, Tensor[U]) -> Tensor[V]

fn get_raw_data[T : Element](Tensor[T]) -> Array[T]

fn length[T](Tensor[T]) -> Int

fn load_model_from_file(String) -> Model

fn log[T, U](Tensor[T]) -> Tensor[U]

fn matmul[T](Tensor[T], Tensor[T]) -> Tensor[T]

fn op_add[T](Tensor[T], Tensor[T]) -> Tensor[T]

fn op_mul[T](Tensor[T], Tensor[T]) -> Tensor[T]

fn op_neg[T](Tensor[T]) -> Tensor[T]

fn op_sub[T](Tensor[T], Tensor[T]) -> Tensor[T]

fn reshape[T](Tensor[T], Array[Int]) -> Tensor[T]

fn shape[T](Tensor[T]) -> Array[Int]

fn tensor_from_array[T : Element](Array[T]) -> Tensor[T]

fn tensor_from_file[T : Element](String) -> Tensor[T]

fn transpose[T](Tensor[T]) -> Tensor[T]

// Types and methods
pub struct Model {
  object : ModelObject
}
impl Model {
  forward[U, V](Self, Tensor[U]) -> Tensor[V]
}

type ModelObject

pub struct Tensor[T] {
  object : TensorObject
}
impl Tensor {
  abs[T](Self[T]) -> Self[T]
  argmax[T](Self[T]) -> Self[Int64]
  argmin[T](Self[T]) -> Self[Int64]
  exp[T, U](Self[T]) -> Self[U]
  get_raw_data[T : Element](Self[T]) -> Array[T]
  length[T](Self[T]) -> Int
  log[T, U](Self[T]) -> Self[U]
  matmul[T](Self[T], Self[T]) -> Self[T]
  op_add[T](Self[T], Self[T]) -> Self[T]
  op_mul[T](Self[T], Self[T]) -> Self[T]
  op_neg[T](Self[T]) -> Self[T]
  op_sub[T](Self[T], Self[T]) -> Self[T]
  reshape[T](Self[T], Array[Int]) -> Self[T]
  shape[T](Self[T]) -> Array[Int]
  transpose[T](Self[T]) -> Self[T]
}
impl[T] Eq for Tensor[T]
impl[T : Element + Show] Show for Tensor[T]

type TensorObject

// Type aliases

// Traits
trait Element

